import unittest
import sys
import os
from unittest.mock import patch, MagicMock
from io import BytesIO
from fastapi.testclient import TestClient
# Modify sys.path to include the folder containing api-service
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../src/api-service')))

# Now you can import as normal
from main import app

class TestGenerateCaptionEndpoint(unittest.TestCase):

    def setUp(self):
        # Set up the FastAPI test client
        self.client = TestClient(app)

    @patch('src.api_service.main.standardize_image')  # Mock image standardization
    @patch('src.api_service.main.captioning_processor')  # Mock the processor (caption generation)
    @patch('src.api_service.main.captioning_model')  # Mock the model
    def test_generate_caption_endpoint(self, mock_captioning_model, mock_captioning_processor, mock_standardize_image):
        # Mock the processor's behavior (inputs and outputs)
        mock_processor = MagicMock()
        mock_captioning_processor.return_value = mock_processor
        mock_captioning_model.generate.return_value = [[1, 2, 3]]  # Example tokenized output
        
        # Mock the standardize_image function
        mock_standardize_image.return_value = "standardized_image"
        
        # Simulate a file upload via POST request
        with open("test_image.jpg", "rb") as img_file:
            img_bytes = BytesIO(img_file.read())  # Convert file into BytesIO to simulate file upload
            response = self.client.post(
                '/generate-caption',  # Endpoint URL
                files={'file': ('test_image.jpg', img_bytes, 'image/jpeg')},
            )

        # Check the response status and content
        self.assertEqual(response.status_code, 200)
        json_data = response.json()
        self.assertIn('caption', json_data)  # Ensure the 'caption' key exists in the response
        self.assertEqual(json_data['caption'], "A beautiful landscape of mountains during sunset.")  # Check if the caption is mocked correctly


if __name__ == '__main__':
    unittest.main()