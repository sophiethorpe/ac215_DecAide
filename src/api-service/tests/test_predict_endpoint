import unittest
from unittest.mock import patch, MagicMock
from io import BytesIO
import sys
import os
import importlib

# Dynamically load the main.py module
module_name = "main"
file_path = os.path.join(os.path.dirname(__file__), '../../api-service/main.py')  # Adjust the relative path if needed
spec = importlib.util.spec_from_file_location(module_name, file_path)
api_service_main = importlib.util.module_from_spec(spec)
sys.modules[module_name] = api_service_main
spec.loader.exec_module(api_service_main)

# Access the FastAPI app from the dynamically imported module
app = getattr(api_service_main, "app", None)
if app is None:
    raise ImportError("Failed to find 'app' in the dynamically imported module")

# Set up the FastAPI TestClient
client = api_service_main.app.test_client()

class TestPredictEndpoint(unittest.TestCase):

    def setUp(self):
        # Set up the FastAPI test client
        self.client = client
        self.client.testing = True

    @patch('src.frontend.image_year_predictor.load_model')  # Mock model loading
    @patch('src.frontend.image_year_predictor.preprocess_image')  # Mock preprocessing function
    @patch('src.frontend.image_year_predictor.standardize_image')  # Mock image standardization
    @patch('src.frontend.image_year_predictor.load_label_encoder')  # Mock label encoder loading
    def test_predict_endpoint(self, mock_load_label_encoder, mock_standardize_image, mock_preprocess_image, mock_load_model):
        # Mock responses
        mock_model = MagicMock()
        mock_model.predict.return_value = [[2020]]  # Mock prediction: image from year 2020
        mock_load_model.return_value = mock_model
        mock_standardize_image.return_value = "standardized_image"
        mock_preprocess_image.return_value = "preprocessed_image"
        mock_load_label_encoder.return_value = MagicMock()

        # Simulate a file upload via POST request
        with open("test_image.jpg", "rb") as img_file:
            img_bytes = BytesIO(img_file.read())  # Convert file into BytesIO to simulate file upload
            response = self.client.post(
                '/predict',  # Assuming this is your endpoint URL
                data={'file': (img_bytes, 'test_image.jpg')},
                content_type='multipart/form-data'
            )

        # Check response status and content
        self.assertEqual(response.status_code, 200)
        json_data = response.get_json()
        self.assertIn('year', json_data)  # Check if the 'year' key exists in the response
        self.assertEqual(json_data['year'], 2020)  # Mocked prediction is 2020

if __name__ == '__main__':
    unittest.main()